#!/usr/bin/python

from __future__ import division

import binascii
import random
import struct
import traceback

from twisted.internet import defer, reactor, serialport, protocol

import txros
from txros import util, variable

import genpy
from std_msgs.msg import Header
from geometry_msgs.msg import Point, Vector3

from thruster_handling.msg import ThrusterInfo, ThrusterCommand
from kill_handling.listener_txros import KillListenerTxROS
from kill_handling.broadcaster_txros import KillBroadcasterTxROS
from uf_common import interpolate
from skytraq_driver.datachunker import DataChunker # XXX


LIFETIME = 1

class Thruster(object):
    CALIBRATION_DATA = (-1., 1.), (-1., 1.)
    CALIBRATION_DATA = (-85.16798603621542, -83.11245965680112, -80.72780555898515, -77.26080420472348, -74.24265026914527, -67.98354200661714, -64.73528274880252, -58.839594796790784, -54.214964815228186, -49.31660284098751, -43.84480379387167, -39.157067326228415, -33.524153970597816, -27.99452422080355, -21.62868280175304, -16.710638097126996, -11.252028508516814, -6.915131637123009, -3.325975605624676, -0.6694157478467332, -0.0, 1.2820153667461807, 4.5426524240814805, 8.881375528191455, 13.348137837179078, 18.081935952218934, 23.798044353808, 28.566743805201153, 34.71221980983474, 41.44351068686406, 45.79359701676346, 53.66790665936434, 58.868611605503126, 64.13079971975266, 70.43881043612473, 75.2278013621419, 79.71972509966326, 83.98438432139565, 87.39923658587354, 92.2549864634037, 93.17094362793253), (-1.0, -0.95, -0.9, -0.85, -0.8, -0.75, -0.7, -0.65, -0.6, -0.55, -0.5, -0.45, -0.4, -0.35, -0.3, -0.25, -0.2, -0.15, -0.1, -0.05, 0.0, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1.0)
    
    def __init__(self, nh, bus, name, config, info_pub, kill_listener, temperature_killer, undervoltage_killer):
        self._nh = nh
        self._bus = bus
        self._name = name
        self._config = config
        self._info_pub = info_pub
        self._kill_listener = kill_listener
        self._temperature_killer = temperature_killer
        self._undervoltage_killer = undervoltage_killer
        
        self._command_sub = nh.subscribe('/thrusters/command/' + self._name, ThrusterCommand, self._got_command)
        
        kill_listener.killed_variable.when_satisfies(lambda killed: killed).watch(lambda killed: self._send_command(0))
        
        assert self._config['node_id'] not in bus.listeners
        bus.listeners[self._config['node_id']] = self.callback
        
        self.message_received = variable.Event()
        
        self._voltage_buffer = []
        self._voltage_buffer_length = 1000
    
    @util.cancellableInlineCallbacks
    def init(self):
        self._send_command(0)
        
        yield util.sleep(.1)
        self._bus.write(self._config['node_id'], 0x88, struct.pack('<f', 0.0005))
        yield util.sleep(.1)
        self._bus.write(self._config['node_id'], 0x8c, struct.pack('<f', 0.0005))
        yield util.sleep(.1)
        
        self._think()
    
    def _got_command(self, msg):
        if not self._kill_listener.killed_variable.value:
            power = interpolate.sample_curve(self.CALIBRATION_DATA, msg.force)
            self._send_command(power)
    
    def _send_command(self, power):
        if abs(power) < 1e-6: power = 0
        for i in xrange(3):
            self._bus.write(self._config['node_id'], 0x4, struct.pack('<f', power))
    
    @util.cancellableInlineCallbacks
    def _think(self):
        while True:
            yield util.sleep(random.uniform(LIFETIME/10, LIFETIME/5))
            self._bus.send(self._config['node_id'], 0x2, 0xF0, struct.pack('>BB', 0xAA, self._config['node_id']))
            
            if self._kill_listener.killed_variable.value:
                yield util.sleep(LIFETIME/10)
                self._send_command(0)
    
    def callback(self, network_id, flags, csr_address, payload):    
        self.message_received.happened(payload)
        
        if len(payload) == 18:
            device_type, rpm, bus_v, bus_i, temp, fault = struct.unpack('<BffffB', payload)
            print network_id, flags, csr_address, device_type, rpm, bus_v, bus_i, temp, fault
            
            if rpm != 0.0: print 'CURRENT', bus_i, rpm
            
            if temp > 60:
                print 'HIGH TEMPERATURE', temp
                self._temperature_killer.kill()
            
            self._voltage_buffer.append(bus_v)
            while len(self._voltage_buffer) > self._voltage_buffer_length:
                self._voltage_buffer.pop(0)
            if len(self._voltage_buffer) == self._voltage_buffer_length:
                if sum(self._voltage_buffer)/len(self._voltage_buffer) < 3.3*12:
                    print 'LOW VOLTAGE', bus_v
                    self._undervoltage_killer.kill()
            print sum(self._voltage_buffer)/len(self._voltage_buffer)
            
            self._info_pub.publish(ThrusterInfo(
                header=Header(
                    stamp=self._nh.get_time(),
                    frame_id=self._config['frame_id'],
                ),
                id=self._name,
                lifetime=genpy.Duration(LIFETIME),
                active=True,
                position=Point(*self._config['position']),
                direction=Vector3(*self._config['direction']),
                min_force=self.CALIBRATION_DATA[0][0],
                max_force=self.CALIBRATION_DATA[0][-1],
                torque_per_force=Vector3(*self._config.get('torque_per_force', [0, 0, 0])),
            ))

class BusProtocol(protocol.Protocol):
    def __init__(self, listeners):
        self.listeners = listeners
        self.dataReceived = DataChunker(self.dataReceiver())
    
    def dataReceiver(self):
        while True:
            if (yield 1) != '\xf0': continue
            if (yield 1) != '\x0f': continue
            header_struct = '<BBBBI'
            header = '\xf0\x0f' + (yield struct.calcsize(header_struct))
            network_id, flags, csr_address, length, header_checksum = struct.unpack(header_struct, header[2:])
            if binascii.crc32(header[:-4]) & 0xffffffff != header_checksum:
                print 'invalid header checksum'
                continue
            payload = yield length
            payload_checksum, = struct.unpack('<I', (yield 4))
            if binascii.crc32(payload) & 0xffffffff != payload_checksum:
                print 'invalid payload checksum'
                continue
            
            try:
                self.listeners.get(network_id, lambda *args: None)(network_id, flags, csr_address, payload)
            except Exception:
                traceback.print_exc()

class Bus(object):
    def __init__(self, nh, port):
        self.listeners = {}
        self._protocol = BusProtocol(self.listeners)
        self._port = serialport.SerialPort(self._protocol, port, reactor, 115200)
    
    def send(self, network_id, flags, csr_address, payload):
        header = struct.pack('<HBBBB', 0x5FF5, network_id, flags, csr_address, len(payload))
        packet = header + struct.pack('<I', binascii.crc32(header) & 0xffffffff) + payload + struct.pack('<I', binascii.crc32(payload) & 0xffffffff)
        self._protocol.transport.write(packet)
    
    def write(self, node_id, address, data):
        self.send(node_id, 0x00, address, data)
    
    def read(self, node_id, address, length):
        self.send(node_id, 0x80+length, address, '')

class Killer(object):
    def __init__(self, nh, name, description, listener):
        self._name = nh.get_name() + '/' + name
        self._broadcaster = KillBroadcasterTxROS(nh, self._name, description)
        self._listener = listener
        self._active = False
        self._think()
    
    @util.cancellableInlineCallbacks
    def _think(self):
        while True:
            if {k.id for k in self._listener.kills_variable.value} - {self._name}:
                self._active = False
            yield self._broadcaster.send(self._active)
            yield util.sleep(.25)
    
    def kill(self):
        self._active = True

@util.cancellableInlineCallbacks
def main():
    nh = yield txros.NodeHandle.from_argv('videoray_m5_thruster_driver')
    
    info_pub = nh.advertise('/thrusters/info', ThrusterInfo)
    kill_listener = KillListenerTxROS(nh)
    
    temperature_killer = Killer(nh, 'temperature', 'Thruster temperature limit', kill_listener)
    undervoltage_killer = Killer(nh, 'undervoltage', 'Thruster undervoltage limit', kill_listener)
    
    for config in (yield nh.get_param('~buses')):
        bus = Bus(nh, config['port'])
        for name, config2 in config['thrusters'].iteritems():
            thruster = Thruster(nh, bus, name, config2, info_pub, kill_listener, temperature_killer, undervoltage_killer)
            yield thruster.init()
    
    yield defer.Deferred() # never exit
util.launch_main(main)
